#!/bin/bash
v=140223 #sfs
p="Сoздание 090-save.pfs v.$v" #sfslinux@gmail.com , Zay (29.12.11)
[ "`whoami`" != "root" ] && exec sudo -A ${0} ${@}
value() { egrep -o "(^| )$1=[^ ]+" /proc/cmdline | cut -d= -f2; } #sfs

[ "`value changes`" ] && ntf -a "Используется другой тип сохранения сессии" "changes=`value changes`
Если Вы хотите использовать сохранение.pfs:
  -перезагрузите систему без changes=
  -переконвертируйте свой файл (папку или раздел) в .pfs" && exit

rw="/mnt/live/memory/changes" #porteus-initrd
[ ! -d $rw ] && rw="/initrd/pup_rw  /initrd/pup_ro1 /initrd/pup_usr" && pup=1 #|| PUPMODE=1 #puppy

case $1 in
    net) 
	[ ! "`find "$rw"/etc/netctl "$rw"/etc/systemd -type f`" ] && ntf -a "Сетевые настройки в '$rw' не обнаружены" && exit
	type="$1" ; msgnet="сетевых настроек" ;;
    --help|-h) 
	echo "$p
Usage: $0 [net]
    net  - только сетевые настройки" ;exit
    ;;
esac


if [ "$pup" ] ;then
. /etc/rc.d/PUPSTATE
. /etc/DISTRO_SPECS
fi

exitfunc(){
if [ -f "/tmp/umount_part" ];then
 cd ~
 for ONEUMNT in `cat /tmp/umount_part | tr '\n' ' '`
 do
  umount /dev/$ONEUMNT
 done
 rm -f /tmp/umount_part
fi
exit
}


    if [ "$pup" ] ;then
PDIR1="$(dirname `echo $PUPSFS | cut -f3 -d ','`)"
if [ "$PUPSAVE" = "" ];then
 if ! [ -f "/mnt/$PDEV1`echo $PUPSFS | cut -f3 -d ','`" ];then
  mkdir -p /mnt/$PDEV1
  mount -t $DEV1FS /dev/$PDEV1 /mnt/$PDEV1
  echo $PDEV1 >>/tmp/umount_part
 fi
 dirwork="/mnt/$PDEV1$PDIR1"
else
 dirwork="/mnt/home$PDIR1"
fi
    else
	dirwork="/mnt/home/`value dir`/base" #pra
    fi

[ -d "${dirwork}" ] || yaf-splash -timeout 6 -font "8x16" -outline 0 -margin 4 -bg green -text "Ошибка! Раздел с Puppy не найден! "

cd "$dirwork"

    if [ "$pup" ] ;then
if [ $PUPMODE -eq 5 ];then
 save=user
else
 save="save-`date +%y%m%d`$type"
fi
pfs="$dirwork/$save\_${DISTRO_VERSION}.sfs"
    else
	save="090-save-`date +%y%m%d`$type" ; pfs="$dirwork/$save-`uname -n`.pfs"
    fi
    
TST() {
bSFS="`basename $SFSNAME`"
if [ -n "`losetup | grep $bSFS`" ];then 
 m=" и в данный момент используется"
 b=Обновить
else
 b=Заменить
fi

export Y_DIALOG='
<window title="'$p'"  window-position="1" icon-name="gtk-save">
 <vbox>
  <text use-markup="true">
    <label>"Файл <b>'$SFSNAME'</b> существует'$m'."</label>
  </text>
  <hbox>
   <button cancel></button>
   <button>
    <input file icon="gtk-apply"></input>
    <label>'$b'</label>
   </button>
   <button>
    <input file icon="gtk-apply"></input>
    <label>Изменить название</label>
   </button>
  </hbox>
 </vbox>
</window>
'
ret="`gtkdialog3 --program=Y_DIALOG --center`"
#echo $ret
eval "$ret"

case "$EXIT" in
"Заменить" ) mv "$SFSNAME" "$SFSNAME.old";;
"Обновить" ) mv "$SFSNAME" "$SFSNAME.old";;
"Изменить название" ) CRT;;
*       ) exitfunc;;
esac
}
#SFS=/etc/fstab;TST;exit

#  <text use-markup="true" wrap="true" width-chars="10">
HLP() {
[ ! "$pup" ] && (defaultbrowser "http://wiki.puppyrus.org/puppyrus/pra#модуль_сохраненияpfs" &) && return
#ntf -w "Help" "Пока не написан" && return

export MAIN_DIALOG='
<window title="Справка '$p'"  window-position="1" icon-name="gtk-save">
 <vbox>
  <text use-markup="true">
    <label>"
Создание фиксированной сессии:

Меню > Система > Создать фиксированную сессию.


Возврат к сохранённой сессии:

Запустите систему с параметром <b>pfix=nosave</b>.
Меню > Система > Восстановить фиксированную сессию.


Постоянная загрузка фиксированной сессии:

Для автоматического подключения SFS-файла c сессией используйте параметр загрузки <b>usersfs</b> (файл с названием <b>user_'${DISTRO_VERSION}'.sfs</b> будет подключаться всегда, даже без параметра <b>usersfs</b>).

Чтобы отключить функцию создания сессии используйте параметр <b>pfix=nosave</b>."</label>
  </text>
  <hbox>
   <button ok></button>
  </hbox>
 </vbox>
</window>
'
ret="`gtkdialog3 --program=MAIN_DIALOG --center`"
}

DLG() {
export DIALOG='	
<window title="'$p'"  window-position="1" icon-name="gtk-save">
 <hbox>
 <vbox>

 <hbox space-expand="true">
 <pixmap>
        <height>48</height><width>48</width><input file icon="save48"></input>
 </pixmap>
   <text use-markup="true"><label>"<big><b>Создание модуля.pfs '$msgnet' сохраненной сессии</b></big>"</label></text>
 <pixmap>
        <height>48</height><width>48</width><input file icon="application-pfs"></input>
 </pixmap>
 </hbox>
   <frame ->
   <text use-markup="true"><label>"Вы можете сохранить состояние системы (все настройки, установленные пакеты и файлы) в модуль.pfs.
   
Модуль.pfs подключается в режиме <i>только чтение</i>. Поэтому Вы получаете <i>неубиваемую</i> систему, которая может находиться на любом носителе (флэш, CD, HDD) и любой файловой системе (ext*, fat*, ntfs).

Можно сделать несколько модулей.pfs и подключать их отдельно или вместе, используя <i>/base</i> и параметры загрузки ядра <b>load= noload=</b>
Модули загружаются в алфавитном порядке (z.pfs перекрывает файлы a.pfs)
"</label></text>
   <hbox>
    <entry activates_default="true" accept="savefilename">
     <variable>SFSNAME</variable>
	 <input>echo '$pfs'</input>
    </entry>
    <button>
     <input file icon="gtk-open"></input>
     <action type="fileselect">SFSNAME</action>
    </button>
    </hbox>
   </frame>
    <hbox>
       <button help></button>
       <button cancel></button>
       <button can-default="true" has-default="true">
        <input file icon="gtk-apply"></input>
        <label>СОЗДАТЬ</label>
       </button>
    </hbox>
 </vbox>
 </hbox>
</window>'
}
DLG
CRT () {
ret="`gtkdialog3 --program=DIALOG`"
eval "$ret"
#echo $ret-$SFS

case "$EXIT" in
"СОЗДАТЬ" ) 
    [ -f "$SFSNAME" ] && TST
    ;;
"Help" ) 
    HLP;CRT;;
*       ) exitfunc;;
esac
}

CRT

ret="$(ntf -3 "\
gtk-save
Полное сохранение
save
\
gtk-home
Только Ваши настройки (/home, /etc)
1\
"  "Выберите тип сохранения.pfs" "
</i><b>Полное</b><i>
Сохранение всех сделанных изменений. Размер может получиться большим. Не рекомендуется при полной загрузке системы в память (RAM).

</i><b>Только настройки</b><i>
Будет сохранено только содержимое <b>'/etc'</b> и <b>'/home/`sfsusr`'</b>
Это позволит уменьшить размер, но установленные программы (не путайте с подключенными модулями.pfs) не сохранятся. Их лучше сделать отдельными модулями
")"
[ "$ret" ] || exit
[ "$ret" = "home" ] && type=home

file2fs="`dirname $SFSNAME`/user`date +%y%m%d`.2fs"


##filesize=`du -s /initrd/pup_rw  /initrd/pup_ro1 /initrd/pup_usr |awk '{ s = s + $1} END {print int(s/32000)+1}'`
filesize=`du -s $rw |awk '{ s = s + $1} END {print int(s/32000)+1}'`
dd if=/dev/null of="$file2fs" bs=32M seek=$filesize
/sbin/mkfs.ext2 -F "$file2fs"
mkdir -p /tmp/makesfs

mount $file2fs /tmp/makesfs -o loop
status=$?
if [ $status -ne 0 ];then
 numloop=3
 while [ -b /dev/loop$numloop ]
 do
  numloop=`expr $numloop + 1`
 done
 mknod /dev/loop$numloop b 7 $numloop
 m1="`mount $file2fs /tmp/makesfs -o loop 2>&1`"
 status=$?
fi

if [ $status -ne 0 ];then
 m="Ошибка монтирования loop-устройства!"
 ntf -a "$m" "$m1" || gxmessage "$m" --borderless --center --wrap --bg red
 exitfunc
fi

if [ "$pup" ] ;then
cp -a /initrd/pup_usr/* /tmp/makesfs
for ONEDIR in `find /initrd/pup_ro1/ -maxdepth 1 -type d`
do
 [ "$ONEDIR" = "/initrd/pup_ro1/" ] && continue
 [ "$ONEDIR" = "/initrd/pup_ro1/dev" ] && continue
 [ "$ONEDIR" = "/initrd/pup_ro1/initrd" ] && continue
 [ "$ONEDIR" = "/initrd/pup_ro1/mnt" ] && continue
 [ "$ONEDIR" = "/initrd/pup_ro1/proc" ] && continue
 [ "$ONEDIR" = "/initrd/pup_ro1/sys" ] && continue
 [ "$ONEDIR" = "/initrd/pup_ro1/tmp" ] && continue
 [ "$ONEDIR" = "/initrd/pup_ro1/.wh..wh.orph" ] && continue
 [ "$ONEDIR" = "/initrd/pup_ro1/.wh..wh.plnk" ] && continue
 basename="`basename $ONEDIR`"
 cp -a -R $ONEDIR/ /tmp/makesfs
done
fi

#######copy
rw1="$rw"
[ "$pup" ] && rw1=/initrd/pup_rw

case $type in
    home)
	cp -aR "$rw1"/home/`sfsusr` /tmp/makesfs
	cp -aR "$rw1"/etc /tmp/makesfs
    ;;
    net)
	mkdir -p /tmp/makesfs/etc
	cp -aR "$rw1"/etc/netctl/ /tmp/makesfs/etc
	cp -aR "$rw1"/etc/systemd/ /tmp/makesfs/etc
    ;;
    *)
#for ONEDIR in `find /initrd/pup_rw/ -maxdepth 1 -type d`
for ONEDIR in `find "$rw1" -maxdepth 1 -type d`
do
 #[ "$ONEDIR" = "/initrd/pup_rw/" ] && continue
 [ "$ONEDIR" = "$rw1" ] && continue
 [ "$ONEDIR" = "$rw1/dev" ] && continue
 [ "$ONEDIR" = "$rw1/initrd" ] && continue
 [ "$ONEDIR" = "$rw1/mnt" ] && continue
 [ "$ONEDIR" = "$rw1/proc" ] && continue
 [ "$ONEDIR" = "$rw1/sys" ] && continue
 [ "$ONEDIR" = "$rw1/tmp" ] && continue
 [ "$ONEDIR" = "$rw1/.wh..wh.orph" ] && continue
 [ "$ONEDIR" = "$rw1/.wh..wh.plnk" ] && continue
 basename="`basename $ONEDIR`"
 cp -a -R $ONEDIR/ /tmp/makesfs
done
    #defaultterminal -e mkpfs /tmp/makesfs -o "$SFSNAME" 
    trim -g /tmp/makesfs
 if [ "`ls -1 /tmp/makesfs_DEV`" ] ;then
    ntf -q "Обнаружены файлы нужные только для компиляции (dev) объемом `cd /tmp/makesfs_DEV && du -sh`" "
Если их сейчас удалить - при необходимости система сама их по новому доустановит.

Удалить dev ?"
    if [ "$?" = "0" ] ;then
	rm -R /tmp/makesfs_DEV ; rm -R /tmp/makesfs/var/lib/pacman
    else
	cp -R /tmp/makesfs_DEV/* /tmp/makesfs && rm -R /tmp/makesfs_DEV
    fi
 fi
    ;;
esac

if [ "$pup" ] ;then
for ONEFILE in `find /tmp/makesfs/ -name .wh.*`
do
 BASENAME="`basename "$ONEFILE"`"
 DIRNAME="`dirname "$ONEFILE"`"
 if [ -f "${DIRNAME}/${BASENAME:4}" ];then
  filelayer=0
  filewhlayer=0
  FILENAME="${DIRNAME:12}/${BASENAME:4}"
  FILEWHNAME="${DIRNAME:12}/${BASENAME}" 
  [ -f "/initrd/pup_usr${FILENAME}" ] && filelayer=1
  [ -f "/initrd/pup_ro1${FILENAME}" ] && filelayer=2
  [ -f "/initrd/pup_rw${FILENAME}" ] && filelayer=3
  [ -f "/initrd/pup_usr${FILEWHNAME}" ] && filewhlayer=1 
  [ -f "/initrd/pup_ro1${FILEWHNAME}" ] && filewhlayer=2
  [ -f "/initrd/pup_rw${FILEWHNAME}" ] && filewhlayer=3
  [ $filelayer -le $filewhlayer ] && rm -f "/tmp/makesfs${FILENAME}" || rm -f "/tmp/makesfs${FILEWHNAME}"  
 fi
done

mkdir -p /tmp/makesfs/tmp 
cp -a /tmp/firstrun /tmp/makesfs/tmp/firstrun
rm /tmp/makesfs/etc/.XLOADED

urxvt -e mksquashfs /tmp/makesfs "$SFSNAME" -e lost+found
status=$?
else
    rm -R  /tmp/makesfs/lost+found
    m1="`wt "mkpfs /tmp/makesfs -o "$SFSNAME"" "Создание "$SFSNAME""`"
    status=$?
fi

umount /tmp/makesfs
rmdir /tmp/makesfs
rm "$file2fs"

[ "$pup" ] || exitfunc

if [ $status -eq 0 ] ;then
    m="Создание $SFSNAME закончилось УСПЕШНО!"
    ntf -w "$m" "$m1" || yaf-splash -timeout 6 -font "8x16" -outline 0 -margin 4 -bg green -text "$m " 
else
    m="Проблема при создании SFS-модуля $SFSNAME!" ; m2="Проверьте наличие свободного места"
    ntf -a "$m $m2" "$m1" || gxmessage "$m $m2" --borderless --center --wrap --bg red
fi

exitfunc
